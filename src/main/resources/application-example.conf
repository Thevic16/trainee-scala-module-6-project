localStores {
    akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
    akka.persistence.journal.leveldb {
        dir = "target/storage/journal"

        # Event adapter
        event-adapters {
            tagging-reader-get-all = "com.vgomez.app.actors.readers.ReaderGetAll$ReaderGetAllEventAdapter"
            tagging-reader-filter-by-categories = "com.vgomez.app.actors.readers.ReaderFilterByCategories$ReaderFilterByCategoriesEventAdapter"
            tagging-reader-starts-by-restaurant = "com.vgomez.app.actors.readers.ReaderStarsByRestaurant$ReaderStarByRestaurantAdapter"
        }

        event-adapter-bindings {
            "com.vgomez.app.actors.readers.ReaderGetAll$RestaurantCreated" = tagging-reader-get-all
            "com.vgomez.app.actors.readers.ReaderGetAll$ReviewCreated" = tagging-reader-get-all
            "com.vgomez.app.actors.readers.ReaderGetAll$UserCreated" = tagging-reader-get-all

            "com.vgomez.app.actors.readers.ReaderFilterByCategories$RestaurantCreated" = tagging-reader-filter-by-categories
            "com.vgomez.app.actors.readers.ReaderFilterByCategories$RestaurantUpdated" = tagging-reader-filter-by-categories

            "com.vgomez.app.actors.readers.ReaderStarsByRestaurant$ReviewCreated" = tagging-reader-starts-by-restaurant
            "com.vgomez.app.actors.readers.ReaderStarsByRestaurant$ReviewUpdated" = tagging-reader-starts-by-restaurant
        }
    }

    # Configuration for the LeveldbReadJournal
    akka.persistence.query.journal.leveldb {
      # Implementation class of the LevelDB ReadJournalProvider
      class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

      # Absolute path to the write journal plugin configuration entry that this
      # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
      # If undefined (or "") it will connect to the default journal as specified by the
      # akka.persistence.journal.plugin property.
      write-plugin = ""

      # The LevelDB write journal is notifying the query side as soon as things
      # are persisted, but for efficiency reasons the query side retrieves the events
      # in batches that sometimes can be delayed up to the configured `refresh-interval`.
      refresh-interval = 3s

      # How many events to fetch in one query (replay) and keep buffered until they
      # are delivered downstreams.
      max-buffer-size = 100
    }

    akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    akka.persistence.snapshot-store.local.dir = "target/storage/snapshots"

    akka.actor.allow-java-serialization = true
}

cassandra {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
        tagging-reader-get-all = "com.vgomez.app.actors.readers.ReaderGetAll$ReaderGetAllEventAdapter"
        tagging-reader-filter-by-categories = "com.vgomez.app.actors.readers.ReaderFilterByCategories$ReaderFilterByCategoriesEventAdapter"
        tagging-reader-starts-by-restaurant = "com.vgomez.app.actors.readers.ReaderStarsByRestaurant$ReaderStarByRestaurantAdapter"
    }

    event-adapter-bindings {
        "com.vgomez.app.actors.readers.ReaderGetAll$RestaurantCreated" = tagging-reader-get-all
        "com.vgomez.app.actors.readers.ReaderGetAll$ReviewCreated" = tagging-reader-get-all
        "com.vgomez.app.actors.readers.ReaderGetAll$UserCreated" = tagging-reader-get-all

        "com.vgomez.app.actors.readers.ReaderFilterByCategories$RestaurantCreated" = tagging-reader-filter-by-categories
        "com.vgomez.app.actors.readers.ReaderFilterByCategories$RestaurantUpdated" = tagging-reader-filter-by-categories

        "com.vgomez.app.actors.readers.ReaderStarsByRestaurant$ReviewCreated" = tagging-reader-starts-by-restaurant
        "com.vgomez.app.actors.readers.ReaderStarsByRestaurant$ReviewUpdated" = tagging-reader-starts-by-restaurant
    }
  }

  akka.actor.allow-java-serialization = true

}

actor-system-config {
    path = "localStores"
    timeout = 5
}

load-dataset {
    path-csv = "target/storage/dataset/postcovid_reviews.csv"
    run = true
    chuck = 25
    # max-amount-row = -1 = infinite
    max-amount-row = 500
}
