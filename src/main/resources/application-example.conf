akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"

akka.persistence.journal.leveldb {
    dir = "target/storage/journal"

    # Event adapter
    event-adapters {
        tagging = "com.vgomez.app.actors.readers.ReaderGetAll$ReaderGetAllEventAdapter"
    }

    event-adapter-bindings {
        "com.vgomez.app.actors.readers.ReaderGetAll$RestaurantCreated" = tagging
        "com.vgomez.app.actors.readers.ReaderGetAll$ReviewCreated" = tagging
        "com.vgomez.app.actors.readers.ReaderGetAll$UserCreated" = tagging
    }
}

# Configuration for the LeveldbReadJournal
akka.persistence.query.journal.leveldb {
  # Implementation class of the LevelDB ReadJournalProvider
  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

  # Absolute path to the write journal plugin configuration entry that this
  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""

  # The LevelDB write journal is notifying the query side as soon as things
  # are persisted, but for efficiency reasons the query side retrieves the events
  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
  refresh-interval = 3s

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = 100
}

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/storage/snapshots"


akka.actor.allow-java-serialization = true

load-dataset {
    path-csv = "target/storage/dataset/postcovid_reviews.csv"
    run = true
}
